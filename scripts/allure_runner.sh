#!/bin/bash

# Flutter Integration Tests with Allure Reporting
# Updated to work with your existing AllureReporter
# This script runs Patrol tests and automatically opens Allure report

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
ALLURE_RESULTS_DIR="allure-results"
ALLURE_REPORT_DIR="allure-report"
TEST_RESULTS_DIR="test-results"
SCREENSHOTS_DIR="screenshots"
PROJECT_ROOT=$(pwd)

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Allure is installed
check_allure_installation() {
    print_status "Checking Allure installation..."
    
    if ! command -v allure &> /dev/null; then
        print_error "Allure is not installed!"
        echo ""
        echo "Please install Allure using one of the following methods:"
        echo "  macOS:   brew install allure"
        echo "  Linux:   Download from https://github.com/allure-framework/allure2/releases"
        echo "  Windows: scoop install allure"
        echo ""
        exit 1
    fi
    
    ALLURE_VERSION=$(allure --version)
    print_success "Allure is installed: $ALLURE_VERSION"
}

# Function to check Flutter environment
check_flutter_environment() {
    print_status "Checking Flutter environment..."
    
    if ! command -v flutter &> /dev/null; then
        print_error "Flutter is not installed or not in PATH!"
        exit 1
    fi
    
    FLUTTER_VERSION=$(flutter --version | head -n1)
    print_success "Flutter: $FLUTTER_VERSION"
    
    # Check if integration_test directory exists
    if [ ! -d "integration_test" ]; then
        print_error "integration_test directory not found!"
        print_error "Please run this script from your Flutter project root."
        exit 1
    fi
    
    print_success "Integration test directory found"
}

# Function to clean previous results
clean_previous_results() {
    print_status "Cleaning previous test results..."
    
    # Clean Allure directories
    if [ -d "$ALLURE_RESULTS_DIR" ]; then
        rm -rf "$ALLURE_RESULTS_DIR"
        print_status "Removed previous allure-results"
    fi
    
    if [ -d "$ALLURE_REPORT_DIR" ]; then
        rm -rf "$ALLURE_REPORT_DIR"
        print_status "Removed previous allure-report"
    fi
    
    # Clean test results and screenshots
    if [ -d "$TEST_RESULTS_DIR" ]; then
        rm -rf "$TEST_RESULTS_DIR"
        print_status "Removed previous test-results"
    fi
    
    if [ -d "$SCREENSHOTS_DIR" ]; then
        rm -rf "$SCREENSHOTS_DIR"
        print_status "Removed previous screenshots"
    fi
    
    # Create fresh directories
    mkdir -p "$ALLURE_RESULTS_DIR"
    mkdir -p "$TEST_RESULTS_DIR"
    mkdir -p "$SCREENSHOTS_DIR"
    
    print_success "Cleaned and created fresh result directories"
}

# Function to run Flutter integration tests with your existing AllureReporter
run_flutter_tests() {
    print_status "Running Flutter integration tests with Patrol and AllureReporter..."
    
    # Set test environment variables
    export PATROL_WAIT=5000
    export INTEGRATION_TEST_SCREENSHOTS="$SCREENSHOTS_DIR"
    export ALLURE_RESULTS_DIRECTORY="$ALLURE_RESULTS_DIR"
    
    print_status "Test environment configured:"
    print_status "  - PATROL_WAIT: $PATROL_WAIT"
    print_status "  - Screenshots: $SCREENSHOTS_DIR"
    print_status "  - Allure results: $ALLURE_RESULTS_DIR"
    
    # Create JSON reporter for detailed output
    local json_output="$TEST_RESULTS_DIR/test_results.json"
    local verbose_output="$TEST_RESULTS_DIR/test_verbose.log"
    
    # Run the integration tests
    print_status "Executing integration tests..."
    
    if flutter test integration_test/ \
        --dart-define=PATROL_WAIT=5000 \
        --dart-define=ALLURE_RESULTS_DIRECTORY="$ALLURE_RESULTS_DIR" \
        --reporter=json \
        --verbose \
        > "$json_output" 2> "$verbose_output"; then
        
        print_success "Integration tests completed successfully"
        return 0
    else
        local exit_code=$?
        print_warning "Tests completed with exit code: $exit_code"
        print_warning "Some tests may have failed, but continuing with report generation"
        return $exit_code
    fi
}

# Function to verify Allure results from your AllureReporter
verify_allure_results() {
    print_status "Verifying Allure results generated by AllureReporter..."
    
    # Count result files
    local result_files=$(find "$ALLURE_RESULTS_DIR" -name "*-result.json" 2>/dev/null | wc -l)
    local container_files=$(find "$ALLURE_RESULTS_DIR" -name "*-container.json" 2>/dev/null | wc -l)
    local env_files=$(find "$ALLURE_RESULTS_DIR" -name "environment.properties" 2>/dev/null | wc -l)
    
    print_status "Allure files found:"
    print_status "  - Test results: $result_files files"
    print_status "  - Containers: $container_files files"
    print_status "  - Environment: $env_files files"
    
    if [ "$result_files" -eq 0 ]; then
        print_warning "No Allure result files found!"
        print_warning "Your AllureReporter may need additional configuration."
        
        # Create a basic result file as fallback
        create_fallback_results
    else
        print_success "Allure results verified - ready for report generation"
    fi
}

# Function to create fallback results if your AllureReporter didn't generate files
create_fallback_results() {
    print_status "Creating fallback Allure results from Flutter test output..."
    
    # Parse the JSON test results if available
    local json_file="$TEST_RESULTS_DIR/test_results.json"
    
    if [ -f "$json_file" ]; then
        python3 << EOF
import json
import uuid
import os
import sys
from datetime import datetime

# Read Flutter test results
try:
    with open('$json_file', 'r') as f:
        content = f.read()
        lines = content.strip().split('\n')
        test_events = []
        for line in lines:
            if line.strip():
                try:
                    test_events.append(json.loads(line))
                except:
                    continue
except Exception as e:
    print(f"Error reading test results: {e}")
    test_events = []

# Group tests by completion
completed_tests = {}
for event in test_events:
    if event.get('type') == 'testStart':
        test_id = event.get('test', {}).get('id')
        if test_id:
            completed_tests[test_id] = {
                'name': event.get('test', {}).get('name', 'Unknown Test'),
                'start_time': event.get('time', 0),
                'status': 'running'
            }
    elif event.get('type') == 'testDone':
        test_id = event.get('testID')
        if test_id in completed_tests:
            completed_tests[test_id]['end_time'] = event.get('time', 0)
            completed_tests[test_id]['status'] = 'passed' if event.get('result') == 'success' else 'failed'
            if event.get('error'):
                completed_tests[test_id]['error'] = event.get('error')
                completed_tests[test_id]['stack_trace'] = event.get('stackTrace', '')

# Create Allure results for each completed test
for test_id, test_data in completed_tests.items():
    if test_data['status'] != 'running':
        test_uuid = str(uuid.uuid4())
        
        allure_result = {
            "uuid": test_uuid,
            "historyId": test_data['name'].replace(' ', '_').lower(),
            "fullName": test_data['name'],
            "name": test_data['name'],
            "status": test_data['status'],
            "start": test_data.get('start_time', int(datetime.now().timestamp() * 1000)),
            "stop": test_data.get('end_time', int(datetime.now().timestamp() * 1000)),
            "labels": [
                {"name": "framework", "value": "flutter_test"},
                {"name": "language", "value": "dart"},
                {"name": "suite", "value": "integration_test"},
                {"name": "testType", "value": "integration"}
            ]
        }
        
        # Add error details if test failed
        if test_data['status'] == 'failed' and 'error' in test_data:
            allure_result['statusDetails'] = {
                "message": test_data.get('error', 'Test failed'),
                "trace": test_data.get('stack_trace', '')
            }
        
        # Write test result file
        result_filename = f'$ALLURE_RESULTS_DIR/{test_uuid}-result.json'
        with open(result_filename, 'w') as f:
            json.dump(allure_result, f, indent=2)

print(f"Created fallback Allure results for {len(completed_tests)} tests")
EOF
    
        print_success "Fallback Allure results created"
    else
        print_warning "No test results file found for fallback generation"
    fi
}

# Function to copy screenshots to Allure results
copy_screenshots_to_allure() {
    print_status "Processing screenshots for Allure report..."
    
    if [ -d "$SCREENSHOTS_DIR" ] && [ "$(ls -A $SCREENSHOTS_DIR 2>/dev/null)" ]; then
        # Copy screenshots to allure results directory
        cp -r "$SCREENSHOTS_DIR"/* "$ALLURE_RESULTS_DIR/" 2>/dev/null || true
        
        local screenshot_count=$(find "$SCREENSHOTS_DIR" -name "*.png" 2>/dev/null | wc -l)
        print_success "Copied $screenshot_count screenshots to Allure results"
    else
        print_warning "No screenshots found in $SCREENSHOTS_DIR"
    fi
}

# Function to generate and open Allure report
generate_and_open_report() {
    print_status "Generating Allure report..."
    
    # Generate the report
    if allure generate "$ALLURE_RESULTS_DIR" -o "$ALLURE_REPORT_DIR" --clean; then
        print_success "Allure report generated successfully"
    else
        print_error "Failed to generate Allure report"
        print_error "Check if there are valid result files in $ALLURE_RESULTS_DIR"
        
        # List files for debugging
        print_status "Files in $ALLURE_RESULTS_DIR:"
        ls -la "$ALLURE_RESULTS_DIR" || true
        
        exit 1
    fi
    
    # Get available port for Allure server
    local port=8080
    local max_attempts=10
    local attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if ! lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            break
        fi
        port=$((port + 1))
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_warning "Could not find available port, using default 8080"
        port=8080
    fi
    
    # Open the report automatically
    print_status "Opening Allure report at http://localhost:$port"
    
    # Start Allure server in background
    allure serve "$ALLURE_RESULTS_DIR" --port $port &
    local allure_pid=$!
    
    # Wait a moment for server to start
    sleep 3
    
    # Try to open browser
    if command -v open &> /dev/null; then
        # macOS
        open "http://localhost:$port"
        print_success "Opened report in browser (macOS)"
    elif command -v xdg-open &> /dev/null; then
        # Linux
        xdg-open "http://localhost:$port"
        print_success "Opened report in browser (Linux)"
    elif command -v start &> /dev/null; then
        # Windows
        start "http://localhost:$port"
        print_success "Opened report in browser (Windows)"
    else
        print_warning "Could not auto-open browser"
    fi
    
    print_success "Allure report is running at: http://localhost:$port"
    print_status "Press Ctrl+C to stop the Allure server"
    
    # Wait for Allure server
    wait $allure_pid
}

# Function to show test summary
show_test_summary() {
    print_status "Test Execution Summary"
    echo "========================================"
    
    # Parse test results if available
    local json_file="$TEST_RESULTS_DIR/test_results.json"
    if [ -f "$json_file" ]; then
        python3 << EOF
import json

try:
    with open('$json_file', 'r') as f:
        content = f.read()
        lines = content.strip().split('\n')
        
    passed = 0
    failed = 0
    total = 0
    
    for line in lines:
        if line.strip():
            try:
                event = json.loads(line)
                if event.get('type') == 'testDone':
                    total += 1
                    if event.get('result') == 'success':
                        passed += 1
                    else:
                        failed += 1
            except:
                continue
    
    print(f"Total Tests: {total}")
    print(f"Passed: {passed}")
    print(f"Failed: {failed}")
    if total > 0:
        print(f"Success Rate: {(passed/total)*100:.1f}%")
    
except Exception as e:
    print(f"Could not parse test summary: {e}")
EOF
    fi
    
    echo "========================================"
    print_status "Report Location: $ALLURE_REPORT_DIR"
    print_status "Results Location: $ALLURE_RESULTS_DIR"
    print_status "Screenshots Location: $SCREENSHOTS_DIR"
}

# Main execution function
main() {
    echo ""
    print_status "🚀 Starting Flutter Integration Tests with Allure Reporting"
    print_status "Using your existing AllureReporter integration"
    echo "============================================================="
    
    # Check prerequisites
    check_allure_installation
    check_flutter_environment
    
    # Clean previous results
    clean_previous_results
    
    # Run tests
    TEST_EXIT_CODE=0
    run_flutter_tests || TEST_EXIT_CODE=$?
    
    # Verify and process results
    verify_allure_results
    copy_screenshots_to_allure
    
    # Generate and open report
    generate_and_open_report &
    
    # Show summary
    show_test_summary
    
    echo "============================================================="
    if [ $TEST_EXIT_CODE -eq 0 ]; then
        print_success "🎉 All tests passed! Allure report is now open."
    else
        print_warning "⚠️ Some tests failed. Check the Allure report for details."
    fi
    
    print_status "The Allure server is running in the background."
    print_status "The report will automatically refresh if you re-run tests."
    echo ""
}

# Handle script interruption
trap 'print_status "Stopping Allure server..."; pkill -f "allure serve" 2>/dev/null || true; exit 0' INT TERM

# Run the main function
main "$@"