workflows:
  hotel-booking-patrol-qa:
    name: Hotel Booking Patrol QA
    max_build_duration: 45
    instance_type: mac_mini_m2
    environment:
      groups:
        - hotel_booking_secrets
      flutter: 3.24.0
      xcode: 15.2
      cocoapods: default
      vars:
        PATROL_WAIT: "10000"
        PATROL_LOG_LEVEL: "info"
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
        - $HOME/.pub-cache/bin
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
        - pattern: 'develop'
          include: true
        - pattern: 'feature/*'
          include: true
    scripts:
      - name: Environment Setup
        script: |
          echo "🚀 Starting Hotel Booking QA Pipeline"
          flutter doctor -v
          dart --version

      - name: Install Dependencies
        script: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Install Patrol CLI
        script: |
          dart pub global activate patrol_cli
          export PATH="$PATH:$HOME/.pub-cache/bin"
          patrol --version

      - name: Run Unit Tests
        script: |
          echo "🧪 Running unit tests..."
          flutter test test/unit/ --reporter=expanded

      - name: Run Widget Tests
        script: |
          echo "🎯 Running widget tests..."
          flutter test test/widgets/ --reporter=expanded

      - name: Android Emulator Setup
        script: |
          echo "📱 Setting up Android emulator..."
          AVD_NAME="patrol_codemagic_avd"
          
          # Create AVD if it doesn't exist
          if ! avdmanager list avd | grep -q "$AVD_NAME"; then
            echo "no" | avdmanager create avd \
              --force \
              -n "$AVD_NAME" \
              -k "system-images;android-34;google_apis;x86_64" \
              --device "pixel_7"
          fi
          
          # Start emulator
          echo "Starting emulator..."
          emulator -avd "$AVD_NAME" -no-audio -no-window -gpu swiftshader_indirect &
          
          # Wait for emulator to be ready
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d "\r") ]]; do sleep 2; done'
          
          # Disable animations for stable testing
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          
          echo "✅ Emulator ready"

      - name: Build Patrol APKs
        script: |
          echo "🔨 Building Patrol APKs..."
          export PATH="$PATH:$HOME/.pub-cache/bin"
          
          # Build for all integration tests
          patrol build android \
            --target integration_test/ \
            --verbose \
            --release

      - name: Run Patrol Integration Tests
        script: |
          echo "🧪 Running Patrol integration tests..."
          export PATH="$PATH:$HOME/.pub-cache/bin"
          
          # Track test results
          FAILED_TESTS=()
          TOTAL_TESTS=0
          PASSED_TESTS=0
          
          # Define test files
          TESTS=(
            "integration_test/tests/dashboard_test.dart"
            "integration_test/tests/overview_test.dart" 
            "integration_test/tests/account_test.dart"
            "integration_test/tests/hotels_test.dart"
          )
          
          echo "Running ${#TESTS[@]} test files..."
          
          for test in "${TESTS[@]}"; do
            TOTAL_TESTS=$((TOTAL_TESTS + 1))
            echo "📋 Running: $test"
            
            if patrol test "$test" --verbose; then
              echo "✅ PASSED: $test"
              PASSED_TESTS=$((PASSED_TESTS + 1))
            else
              echo "❌ FAILED: $test"
              FAILED_TESTS+=("$test")
            fi
            
            # Small delay between tests
            sleep 2
          done
          
          # Results summary
          echo ""
          echo "📊 TEST SUMMARY:"
          echo "Total Tests: $TOTAL_TESTS"
          echo "Passed: $PASSED_TESTS"
          echo "Failed: ${#FAILED_TESTS[@]}"
          
          if [ ${#FAILED_TESTS[@]} -eq 0 ]; then
            echo "🎉 All Patrol tests passed!"
          else
            echo "💥 Failed tests:"
            for failed_test in "${FAILED_TESTS[@]}"; do
              echo "  - $failed_test"
            done
            exit 1
          fi

      - name: Generate Test Report
        script: |
          echo "📊 Generating test report..."
          
          # Create simple test report
          cat > test_report.txt << EOF
          Hotel Booking App - Test Results
          ================================
          
          Build: $CM_BUILD_ID
          Branch: $CM_BRANCH
          Commit: $CM_COMMIT
          Date: $(date)
          
          Test Results:
          - Unit Tests: ✅ Completed
          - Widget Tests: ✅ Completed  
          - Integration Tests: ✅ Completed
          
          Platform: Android (Emulator)
          Flutter Version: 3.24.0
          
          EOF
          
          echo "✅ Test report generated"

      - name: Cleanup
        script: |
          echo "🧹 Cleaning up..."
          # Kill emulator
          pkill -f emulator || true
          # Remove temporary files
          rm -rf /tmp/patrol* || true
          echo "✅ Cleanup completed"

    artifacts:
      - test_report.txt
      - patrol-*.log
      - screenshots/**
      - test-results/**
      - build/app/outputs/apk/debug/app-debug.apk
      - build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk

    publishing:
      slack:
        channel: '#qa-automation'
        notify_on_build_start: false
        notify:
          success: true
          failure: true
      email:
        recipients:
          - ahmad@junoon.dev
        notify:
          success: false
          failure: true