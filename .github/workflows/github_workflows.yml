name: Hotel Booking QA Pipeline

on:
  push:
    branches: [main, master, develop]
    paths:
      - "lib/**"
      - "test/**"
      - "integration_test/**"
      - "android/**"
      - "pubspec.yaml"
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      run_firebase:
        description: 'Run Firebase Test Lab'
        required: false
        default: true
        type: boolean
      run_codemagic:
        description: 'Run CodeMagic Pipeline'
        required: false
        default: true
        type: boolean

env:
  FLUTTER_VERSION: "3.24.0"
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  quick_validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_run_integration: ${{ steps.changes.outputs.integration_needed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check Changed Files
        id: changes
        run: |
          if git diff --name-only HEAD~1 | grep -E "(integration_test/|lib/)" > /dev/null; then
            echo "integration_needed=true" >> $GITHUB_OUTPUT
          else
            echo "integration_needed=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs
      - name: Run Unit Widget Tests
        run: flutter test test/unit/ test/widgets/ --reporter=expanded --coverage
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  trigger_codemagic:
    name: Trigger CodeMagic
    runs-on: ubuntu-latest
    needs: quick_validation
    if: needs.quick_validation.outputs.should_run_integration == 'true' && (github.event.inputs.run_codemagic != 'false')
    timeout-minutes: 5
    steps:
      - name: Trigger CodeMagic Build
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          curl -X POST "${{ secrets.CODEMAGIC_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -H "x-auth-token: ${{ secrets.CODEMAGIC_API_TOKEN }}" \
            -d '{
              "appId": "${{ secrets.CODEMAGIC_APP_ID }}",
              "workflowId": "hotel-booking-patrol-qa",
              "branch": "'$BRANCH'",
              "environment": {
                "GITHUB_RUN_ID": "${{ github.run_id }}",
                "GITHUB_SHA": "${{ github.sha }}",
                "TRIGGERED_BY": "github-actions"
              }
            }'
      - name: Wait for CodeMagic Build
        run: |
          sleep 30
          BUILD_ID=""
          for i in {1..10}; do
            RESPONSE=$(curl -s -H "x-auth-token: ${{ secrets.CODEMAGIC_API_TOKEN }}" \
              "https://api.codemagic.io/builds?appId=${{ secrets.CODEMAGIC_APP_ID }}&limit=5")
            BUILD_ID=$(echo "$RESPONSE" | jq -r '.builds[] | select(.commitHash == "${{ github.sha }}") | .id' | head -1)
            if [ "$BUILD_ID" != "null" ] && [ -n "$BUILD_ID" ]; then
              break
            fi
            sleep 10
          done
          if [ -z "$BUILD_ID" ] || [ "$BUILD_ID" = "null" ]; then
            exit 1
          fi
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
      - name: Monitor CodeMagic Progress
        run: |
          for i in {1..90}; do
            RESPONSE=$(curl -s -H "x-auth-token: ${{ secrets.CODEMAGIC_API_TOKEN }}" \
              "https://api.codemagic.io/builds/$BUILD_ID")
            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            case "$STATUS" in
              "finished")
                RESULT=$(echo "$RESPONSE" | jq -r '.result')
                if [ "$RESULT" = "success" ]; then
                  exit 0
                else
                  exit 1
                fi
                ;;
              "failed"|"cancelled"|"timeout")
                exit 1
                ;;
              "building"|"preparing"|"queued")
                ;;
              *)
                ;;
            esac
            sleep 20
          done
          exit 1

  trigger_firebase:
    name: Trigger Firebase
    runs-on: ubuntu-latest
    needs: [quick_validation, trigger_codemagic]
    if: needs.quick_validation.outputs.should_run_integration == 'true' && (github.event.inputs.run_firebase != 'false')
    timeout-minutes: 45
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true
      - name: Setup Patrol CLI
        run: |
          dart pub global activate patrol_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH
      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs
      - name: Authenticate Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}
      - name: Build Patrol APKs
        run: |
          patrol build android --target integration_test/ --release --verbose
          ls -la build/app/outputs/apk/debug/
          ls -la build/app/outputs/apk/androidTest/debug/
      - name: Run Firebase Test Lab
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RESULTS_DIR="patrol-github-${TIMESTAMP}"
          gcloud firebase test android run \
            --type instrumentation \
            --app build/app/outputs/apk/debug/app-debug.apk \
            --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=shiba,version=34,locale=en,orientation=portrait \
            --device model=oriole,version=33,locale=en,orientation=portrait \
            --timeout 25m \
            --results-bucket=${FIREBASE_PROJECT_ID}-test-results \
            --results-dir="${RESULTS_DIR}" \
            --environment-variables \
              clearPackageData=true,\
              disableAnalytics=true,\
              PATROL_WAIT=10000,\
              GITHUB_RUN_ID=${{ github.run_id }},\
              GITHUB_SHA=${{ github.sha }} \
            --use-orchestrator \
            --project $FIREBASE_PROJECT_ID \
            --format=json > firebase_results.json
      - name: Parse Firebase Results
        run: |
          if [ -f firebase_results.json ]; then
            OUTCOME=$(jq -r '.outcome // "UNKNOWN"' firebase_results.json)
            TEST_MATRIX_ID=$(jq -r '.testMatrixId // "unknown"' firebase_results.json)
            echo "Test Matrix ID: $TEST_MATRIX_ID"
            echo "Outcome: $OUTCOME"
            if [ "$OUTCOME" = "PASSED" ]; then
              echo "firebase_status=success" >> $GITHUB_OUTPUT
            else
              echo "firebase_status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            exit 1
          fi
      - name: Upload Firebase Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: firebase-test-results
          path: firebase_results.json

  final_status:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [quick_validation, trigger_codemagic, trigger_firebase]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          if [ "${{ needs.quick_validation.result }}" = "success" ]; then
            echo "Unit Widget Tests: Passed"
          else
            echo "Unit Widget Tests: Failed"
          fi
          if [ "${{ needs.trigger_codemagic.result }}" = "success" ]; then
            echo "CodeMagic Patrol Tests: Passed"
          elif [ "${{ needs.trigger_codemagic.result }}" = "skipped" ]; then
            echo "CodeMagic Patrol Tests: Skipped"
          else
            echo "CodeMagic Patrol Tests: Failed"
          fi
          if [ "${{ needs.trigger_firebase.result }}" = "success" ]; then
            echo "Firebase Test Lab: Passed"
          elif [ "${{ needs.trigger_firebase.result }}" = "skipped" ]; then
            echo "Firebase Test Lab: Skipped"
          else
            echo "Firebase Test Lab: Failed"
          fi
      - name: Final Result
        run: |
          if [ "${{ needs.quick_validation.result }}" != "success" ]; then
            exit 1
          fi
          if [ "${{ needs.trigger_codemagic.result }}" = "failure" ]; then
            exit 1
          fi
          if [ "${{ needs.trigger_firebase.result }}" = "failure" ]; then
            exit 1
          fi