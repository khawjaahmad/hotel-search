name: Hotel Booking QA Pipeline - Fixed

on:
  push:
    branches: [main, master, develop]
    paths:
      - "lib/**"
      - "test/**"
      - "integration_test/**"
      - "android/**"
      - "pubspec.yaml"
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      run_firebase:
        description: 'Run Firebase Test Lab'
        required: false
        default: true
        type: boolean

env:
  FLUTTER_VERSION: "3.24.0"
  JAVA_VERSION: "17"
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  # Job 1: Quick validation
  quick_validation:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should_run_integration: ${{ steps.changes.outputs.integration_needed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check Changed Files
        id: changes
        run: |
          if git diff --name-only HEAD~1 | grep -E "(integration_test/|lib/)" > /dev/null; then
            echo "integration_needed=true" >> $GITHUB_OUTPUT
          else
            echo "integration_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Run Unit & Widget Tests
        run: |
          flutter test test/unit/ test/widgets/ \
            --reporter=expanded \
            --coverage \
            --timeout=60s

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  # Job 2: Build Patrol APKs with corrected Android setup
  build_patrol_apks:
    name: Build Patrol APKs
    runs-on: ubuntu-latest
    needs: quick_validation
    if: needs.quick_validation.outputs.should_run_integration == 'true'
    timeout-minutes: 35
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Required Android Components
        run: |
          # Accept all licenses first
          yes | sdkmanager --licenses || true
          
          # Install required SDK components
          echo "Installing Android SDK components..."
          sdkmanager "platform-tools"
          sdkmanager "platforms;android-34" 
          sdkmanager "build-tools;34.0.0"
          sdkmanager "ndk;26.1.10909125"
          
          # Verify installation
          echo "‚úÖ Installed Android components:"
          sdkmanager --list_installed | grep -E "(platform|build-tools|ndk)" || true
          
          # Set environment variables
          export ANDROID_NDK_VERSION=26.1.10909125
          echo "ANDROID_NDK_VERSION=26.1.10909125" >> $GITHUB_ENV
          
          if [ -n "$ANDROID_SDK_ROOT" ]; then
            export ANDROID_NDK_ROOT="$ANDROID_SDK_ROOT/ndk/26.1.10909125"
            echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> $GITHUB_ENV
          fi

      - name: Install Patrol CLI
        run: |
          dart pub global activate patrol_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Fix CI Environment Issues
        run: |
          echo "üîß Applying CI environment fixes..."
          
          # Fix NDK version in gradle.properties
          if [ ! -f "android/gradle.properties" ]; then
            touch android/gradle.properties
          fi
          
          # Remove existing NDK version and add correct one
          sed -i '/android.ndkVersion/d' android/gradle.properties 2>/dev/null || true
          echo "android.ndkVersion=26.1.10909125" >> android/gradle.properties
          
          # Create minimal proguard-rules.pro if missing
          if [ ! -f "android/app/proguard-rules.pro" ]; then
            cat > android/app/proguard-rules.pro << 'EOF'
          # Flutter ProGuard rules
          -keep class io.flutter.app.** { *; }
          -keep class io.flutter.plugin.** { *; }
          -keep class io.flutter.util.** { *; }
          -keep class io.flutter.view.** { *; }
          -keep class io.flutter.** { *; }
          -keep class io.flutter.plugins.** { *; }
          
          # Patrol specific rules
          -keep class pl.leancode.patrol.** { *; }
          
          # Integration test rules  
          -keep class dev.flutter.integration_test.** { *; }
          
          # Don't optimize for debugging
          -dontoptimize
          -dontobfuscate
          EOF
            echo "‚úÖ Created proguard-rules.pro"
          fi
          
          # Fix gradle wrapper permissions
          chmod +x android/gradlew
          
          echo "‚úÖ CI environment fixes applied"

      - name: Verify Environment Setup
        run: |
          echo "üîç Verifying environment setup..."
          echo "Java version:"
          java -version
          echo ""
          echo "Flutter version:"
          flutter --version
          echo ""
          echo "Patrol version:"
          patrol --version
          echo ""
          echo "Android SDK location: $ANDROID_SDK_ROOT"
          echo "Android NDK location: $ANDROID_NDK_ROOT"
          
          # Check if NDK is actually installed
          if [ -d "$ANDROID_SDK_ROOT/ndk/26.1.10909125" ]; then
            echo "‚úÖ NDK 26.1.10909125 is installed"
          else
            echo "‚ùå NDK 26.1.10909125 not found"
            echo "Available NDK versions:"
            ls -la "$ANDROID_SDK_ROOT/ndk/" || echo "NDK directory not found"
          fi

      - name: Build Patrol APKs with Retry Logic
        run: |
          # Function to attempt build
          build_patrol() {
            echo "üî® Building Patrol APKs..."
            patrol build android \
              --target integration_test/ \
              --release \
              --verbose \
              --dart-define=PATROL_WAIT=0 \
              --dart-define=PATROL_APP_PACKAGE_NAME=com.example.hotel_booking \
              --dart-define=PATROL_ANDROID_APP_NAME="Hotel Booking" \
              --dart-define=PATROL_TEST_LABEL_ENABLED=true
          }
          
          # First attempt
          echo "üî® First build attempt..."
          if build_patrol; then
            echo "‚úÖ Build successful on first attempt"
          else
            echo "‚ùå First attempt failed, cleaning and retrying..."
            
            # Clean everything thoroughly
            flutter clean
            rm -rf android/.gradle
            rm -rf android/app/build
            rm -rf build/
            rm -rf ~/.gradle/caches/
            
            # Re-setup everything
            flutter pub get
            dart run build_runner build --delete-conflicting-outputs
            
            # Ensure permissions
            chmod +x android/gradlew
            
            # Second attempt with debug build for better error reporting
            echo "üî® Second attempt with debug build..."
            if patrol build android --target integration_test/ --debug --verbose; then
              echo "‚úÖ Debug build successful"
            else
              echo "‚ùå Both attempts failed - checking for partial outputs..."
              find build/ -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
              
              # Show detailed error information
              echo "=== Build Error Details ==="
              if [ -f "android/app/build/outputs/logs/gradle.log" ]; then
                tail -50 android/app/build/outputs/logs/gradle.log
              fi
              
              exit 1
            fi
          fi

      - name: Verify APK Outputs
        run: |
          echo "üì¶ Checking build outputs..."
          
          # List all APK files recursively
          echo "All APK files found:"
          find build/ -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          
          # Check standard locations
          echo ""
          echo "Checking standard APK locations:"
          
          APP_APK="build/app/outputs/apk/debug/app-debug.apk"
          TEST_APK="build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
          
          if [ -f "$APP_APK" ]; then
            echo "‚úÖ App APK found: $APP_APK ($(du -h "$APP_APK" | cut -f1))"
          else
            echo "‚ùå App APK not found at $APP_APK"
            # Try to find app APK elsewhere
            echo "Searching for app APK..."
            find build/ -name "*app*.apk" -not -name "*test*" -type f | head -3
          fi
          
          if [ -f "$TEST_APK" ]; then
            echo "‚úÖ Test APK found: $TEST_APK ($(du -h "$TEST_APK" | cut -f1))"
          else
            echo "‚ùå Test APK not found at $TEST_APK"
            # Try to find test APK elsewhere
            echo "Searching for test APK..."
            find build/ -name "*test*.apk" -type f | head -3
          fi
          
          # Ensure at least one of each type was found
          APP_COUNT=$(find build/ -name "*app*.apk" -not -name "*test*" -type f | wc -l)
          TEST_COUNT=$(find build/ -name "*test*.apk" -type f | wc -l)
          
          if [ "$APP_COUNT" -eq 0 ]; then
            echo "‚ùå No app APK found anywhere"
            exit 1
          fi
          
          if [ "$TEST_COUNT" -eq 0 ]; then
            echo "‚ùå No test APK found anywhere"
            exit 1
          fi
          
          echo "‚úÖ APK verification passed"

      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: patrol-apks
          path: |
            build/app/outputs/apk/**/*.apk
            build/**/*.apk
          retention-days: 7

      - name: Upload Build Logs on Failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs
          path: |
            android/app/build/outputs/logs/
            ~/.gradle/daemon/*/daemon-*.log
            patrol-*.log
          retention-days: 3

  # Job 3: Firebase Test Lab (only if APKs were built successfully)
  firebase_test_lab:
    name: Firebase Test Lab
    runs-on: ubuntu-latest
    needs: [quick_validation, build_patrol_apks]
    if: needs.quick_validation.outputs.should_run_integration == 'true' && needs.build_patrol_apks.result == 'success' && (github.event.inputs.run_firebase != 'false')
    timeout-minutes: 45
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download APK Artifacts
        uses: actions/download-artifact@v4
        with:
          name: patrol-apks
          path: build/

      - name: Locate and Verify APK Files
        id: locate_apks
        run: |
          echo "üîç Locating APK files..."
          
          # List all downloaded files
          find build/ -type f -name "*.apk"
          
          # Find app and test APKs using more flexible search
          APP_APK=$(find build/ -name "*app*.apk" -not -name "*test*" -not -name "*androidTest*" | head -1)
          TEST_APK=$(find build/ -name "*androidTest*.apk" -o -name "*test*.apk" | head -1)
          
          # Fallback search if not found
          if [ -z "$APP_APK" ]; then
            APP_APK=$(find build/ -path "*/debug/app-debug.apk" | head -1)
          fi
          
          if [ -z "$TEST_APK" ]; then
            TEST_APK=$(find build/ -path "*/androidTest/debug/*androidTest.apk" | head -1)
          fi
          
          # Verify we found both APKs
          if [ -z "$APP_APK" ] || [ ! -f "$APP_APK" ]; then
            echo "‚ùå App APK not found"
            echo "Available files:"
            find build/ -name "*.apk" -type f
            exit 1
          fi
          
          if [ -z "$TEST_APK" ] || [ ! -f "$TEST_APK" ]; then
            echo "‚ùå Test APK not found" 
            echo "Available files:"
            find build/ -name "*.apk" -type f
            exit 1
          fi
          
          # Verify APK files are valid
          if [ ! -s "$APP_APK" ]; then
            echo "‚ùå App APK is empty"
            exit 1
          fi
          
          if [ ! -s "$TEST_APK" ]; then
            echo "‚ùå Test APK is empty"
            exit 1
          fi
          
          echo "app_apk=$APP_APK" >> $GITHUB_OUTPUT
          echo "test_apk=$TEST_APK" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Found valid APKs:"
          echo "  App APK: $APP_APK ($(du -h "$APP_APK" | cut -f1))"
          echo "  Test APK: $TEST_APK ($(du -h "$TEST_APK" | cut -f1))"

      - name: Authenticate Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Run Firebase Test Lab
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RESULTS_DIR="patrol-github-${TIMESTAMP}"
          
          echo "üöÄ Running Firebase Test Lab..."
          echo "App APK: ${{ steps.locate_apks.outputs.app_apk }}"
          echo "Test APK: ${{ steps.locate_apks.outputs.test_apk }}"
          
          gcloud firebase test android run \
            --type instrumentation \
            --app "${{ steps.locate_apks.outputs.app_apk }}" \
            --test "${{ steps.locate_apks.outputs.test_apk }}" \
            --device model=shiba,version=34,locale=en,orientation=portrait \
            --timeout 25m \
            --results-bucket="${FIREBASE_PROJECT_ID}-test-results" \
            --results-dir="${RESULTS_DIR}" \
            --environment-variables \
              clearPackageData=true,\
              disableAnalytics=true,\
              PATROL_WAIT=10000,\
              GITHUB_RUN_ID=${{ github.run_id }},\
              GITHUB_SHA=${{ github.sha }} \
            --use-orchestrator \
            --project "$FIREBASE_PROJECT_ID" \
            --format=json > firebase_results.json

      - name: Parse Firebase Results
        run: |
          if [ -f firebase_results.json ]; then
            echo "üìä Firebase Test Lab Results:"
            cat firebase_results.json | jq '.' || cat firebase_results.json
            
            OUTCOME=$(jq -r '.outcome // "UNKNOWN"' firebase_results.json)
            TEST_MATRIX_ID=$(jq -r '.testMatrixId // "unknown"' firebase_results.json)
            
            echo ""
            echo "Test Matrix ID: $TEST_MATRIX_ID"
            echo "Outcome: $OUTCOME"
            
            if [ "$OUTCOME" = "PASSED" ]; then
              echo "‚úÖ Firebase Test Lab: PASSED"
            else
              echo "‚ùå Firebase Test Lab: FAILED (Outcome: $OUTCOME)"
              exit 1
            fi
          else
            echo "‚ùå Firebase results file not found"
            exit 1
          fi

      - name: Upload Firebase Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: firebase-test-results
          path: firebase_results.json

  # Job 4: Final status summary
  final_status:
    name: Final Status Summary
    runs-on: ubuntu-latest
    needs: [quick_validation, build_patrol_apks, firebase_test_lab]
    if: always()
    steps:
      - name: Generate Summary Report
        run: |
          echo "## üìä CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Unit/Widget Tests
          if [ "${{ needs.quick_validation.result }}" = "success" ]; then
            echo "| Unit & Widget Tests | ‚úÖ PASSED | ~5min |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit & Widget Tests | ‚ùå FAILED | ~5min |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Patrol APK Build
          if [ "${{ needs.build_patrol_apks.result }}" = "success" ]; then
            echo "| Patrol APK Build | ‚úÖ PASSED | ~15min |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build_patrol_apks.result }}" = "skipped" ]; then
            echo "| Patrol APK Build | ‚è≠Ô∏è SKIPPED | N/A |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Patrol APK Build | ‚ùå FAILED | ~15min |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Firebase Test Lab
          if [ "${{ needs.firebase_test_lab.result }}" = "success" ]; then
            echo "| Firebase Test Lab | ‚úÖ PASSED | ~20min |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.firebase_test_lab.result }}" = "skipped" ]; then
            echo "| Firebase Test Lab | ‚è≠Ô∏è SKIPPED | N/A |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Firebase Test Lab | ‚ùå FAILED | ~20min |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build ID: \`${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Final Pipeline Result
        run: |
          echo "üîç Evaluating final pipeline result..."
          
          FAILED=false
          
          # Check each job result
          if [ "${{ needs.quick_validation.result }}" != "success" ]; then
            echo "‚ùå Unit/Widget tests failed"
            FAILED=true
          fi
          
          if [ "${{ needs.build_patrol_apks.result }}" = "failure" ]; then
            echo "‚ùå Patrol APK build failed"
            FAILED=true
          fi
          
          if [ "${{ needs.firebase_test_lab.result }}" = "failure" ]; then
            echo "‚ùå Firebase Test Lab failed"
            FAILED=true
          fi
          
          # Final result
          if [ "$FAILED" = "true" ]; then
            echo "‚ùå Overall pipeline: FAILED"
            echo "Check the individual job logs for detailed error information."
            exit 1
          else
            echo "‚úÖ Overall pipeline: PASSED"
            echo "All stages completed successfully!"
          fi