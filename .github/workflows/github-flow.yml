name: Hotel Booking QA Pipeline

on:
  push:
    branches: [main, master, develop]
    paths:
      - "lib/**"
      - "test/**"
      - "integration_test/**"
      - "pubspec.yaml"
  pull_request:
    branches: [main, master, develop]

env:
  FLUTTER_VERSION: "3.24.0"
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  unit_widget_tests:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Create Environment File
        run: |
          echo "SERPAPI_API_KEY=${{ secrets.SERPAPI_API_KEY }}" > .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env

      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Run Unit Tests
        run: flutter test test/unit/ --reporter=expanded

      - name: Run Widget Tests
        run: flutter test test/widgets/ --reporter=expanded

      - name: Generate Coverage
        run: flutter test --coverage

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  trigger_firebase_patrol:
    name: Firebase Patrol Tests
    runs-on: ubuntu-latest
    needs: unit_widget_tests
    if: success()
    timeout-minutes: 45
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Patrol CLI
        run: |
          dart pub global activate patrol_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Create Environment File
        run: |
          echo "SERPAPI_API_KEY=${{ secrets.SERPAPI_API_KEY }}" > .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env

      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs

      - name: Authenticate Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Build Patrol APKs
        run: |
          patrol build android --target integration_test/ --release --verbose

      - name: Run Patrol Tests on Firebase
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          RESULTS_DIR="patrol-github-${TIMESTAMP}"
          
          gcloud firebase test android run \
            --type instrumentation \
            --app build/app/outputs/apk/debug/app-debug.apk \
            --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=shiba,version=34,locale=en,orientation=portrait \
            --timeout 30m \
            --results-bucket=${FIREBASE_PROJECT_ID}-test-results \
            --results-dir="${RESULTS_DIR}" \
            --environment-variables clearPackageData=true,PATROL_WAIT=10000,SERPAPI_API_KEY=${{ secrets.SERPAPI_API_KEY }} \
            --use-orchestrator \
            --project $FIREBASE_PROJECT_ID

  trigger_codemagic:
    name: Trigger CodeMagic
    runs-on: ubuntu-latest
    needs: unit_widget_tests
    if: success()
    timeout-minutes: 5
    steps:
      - name: Trigger CodeMagic Webhook
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi
          
          echo "🚀 Triggering CodeMagic via webhook for branch: $BRANCH"
          
          # Simple webhook trigger - no complex authentication needed
          curl -X POST "${{ secrets.CODEMAGIC_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "ref": "refs/heads/'$BRANCH'"
            }'
          
          echo "✅ CodeMagic webhook triggered"
          echo "🔗 Check CodeMagic dashboard for build status"

  final_status:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [unit_widget_tests, trigger_firebase_patrol, trigger_codemagic]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit_widget_tests.result }}" = "success" ]; then
            echo "✅ Unit & Widget Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit & Widget Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.trigger_firebase_patrol.result }}" = "success" ]; then
            echo "✅ Firebase Patrol Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Firebase Patrol Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.trigger_codemagic.result }}" = "success" ]; then
            echo "✅ CodeMagic: Triggered" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CodeMagic: Failed to Trigger" >> $GITHUB_STEP_SUMMARY
          fi